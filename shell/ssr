#!/bin/bash
# 作者：老徐
# SSR免费分享网站（所有帐号均来源于网上别人的分享）：http://ss.pythonic.life
# 源代码主页：https://github.com/the0demiurge
# 访问https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr获取本脚本的最新版
# 使用方法：把该脚本放到$PATH里面并加入可执行权限就行（比如说放到/usr/local/bin）
# 首次使用输入ssr install后安装时会自动安装到 $HOME/.local/share/shadowsocksr
# 输入ssr config进行配置，输入JSON格式的配置文件
# 输入ssr uninstall卸载
# 输入ssr help 展示帮助信息

set -e
if [ -z "$EDITOR" ]; then
    EDITOR="vi"
fi

CONFIG_FILE_ENCRYPTED=false # 配置文件是否经过gpg加密
WEBSITE=http://ss.pythonic.life
BRANCH=manyuser
GIT_REPO=https://github.com/shadowsocksrr/shadowsocksr.git
INSTALL_PATH=$HOME/.local/share/shadowsocksr

get_config_file_port() {
    if [ -z "$(command -v jq)" ]; then
        echo 'jq in use'
        if $CONFIG_FILE_ENCRYPTED; then
            local decrypt_text
            decrypt_text=$(gpg -d "$INSTALL_PATH/config.json")
            PORT=$(echo "$decrypt_text" | jq .local_port)
        else
            PORT=$(jq .local_port "$INSTALL_PATH/config.json")
        fi
    else
        if $CONFIG_FILE_ENCRYPTED; then
            local decrypt_text
            decrypt_text=$(gpg -d "$INSTALL_PATH/config.json")
            PORT=$(echo "$decrypt_text" | sed -r 's/\/\/.*$|\s+//g' | grep -oP '(?<!//)(?<="local_port":)\d+')
        else
            PORT=$(sed -r 's/\/\/.*$|\s+//g' "$INSTALL_PATH/config.json" | grep -oP '(?<!//)(?<="local_port":)\d+')
        fi
        echo "local_port is $PORT; if any exceptions orrured, please install jq"
    fi
}

ssr_help() {
    echo ShadowSocksR python client tool
    echo -e if you have not installed ssr, run \`ssr install\` first
    echo Usage:
    echo -e "\t" "ssr help"
    echo -e "\n" "Install/Uninstall"
    echo -e "\t" "ssr install               install shadowsocksr client"
    echo -e "\t" "ssr uninstall             uninstall shadowsocksr client"
    echo -e "\n" "Config and Subscribe"
    echo -e "\t" "ssr update                update subscription from $WEBSITE"
    echo -e "\t" "ssr config                edit config.json"
    echo -e "\t" "ssr xclip                 paste configs from clipboard to config.json"
    echo -e "\n" "Start/Stop/Restart"
    echo -e "\t" "ssr start                 start the shadowsocks service"
    echo -e "\t" "ssr stop                  stop the shadowsocks service"
    echo -e "\t" "ssr restart               restart the shadowsocks service"
    echo -e "\n" "Testing and Maintenance"
    echo -e "\t" "ssr test                  get ip from cip.cc using socks5 proxy"
    echo -e "\t" "ssr log                   cat the log of shadowsocks"
    echo -e "\t" "ssr shell                 cd into ssr installation dir"
    echo -e "\t" "ssr clean                 clean ssr configuration backups"
    echo -e "\n" "System Proxy"
    echo -e "\t" "ssr sysproxy on|off|info  enable/disable/display system proxy"
}

ssr_install() {
    git clone -b "$BRANCH" "$GIT_REPO" "$INSTALL_PATH"
    echo -e "Install finished!\nYou can visit my website $WEBSITE to acquire free ssr configs"
}

ssr_uninstall() {
    echo "Danger! are you to remove $INSTALL_PATH forever?(y/N)"
    read -r doit
    if [ "$doit" == "y" ]; then rm -rvf "$INSTALL_PATH"; fi
}

ssr_test() {
    echo Testing Connection...
    get_config_file_port

    echo 'connection information:'
    curl ipinfo.io --socks5 localhost:"$PORT"
    echo
    if curl cip.cc --socks5 localhost:"$PORT"; then
        if [ -z "$(command -v proxychains4)" ]; then
            echo "You may install proxychains4 and configure it properly to test net delay"
        else
            echo -e '\nChecking delay...'
            proxychains4 ping -c 5 cip.cc
        fi
    fi
}

ssr_start() {
    cd "$INSTALL_PATH/shadowsocks/"
    python local.py -d start --pid-file="$INSTALL_PATH/ssr.pid" --log-file="$INSTALL_PATH/ssr.log"
    sleep 1
    ssr_test
}

ssr_stop() {
    cd "$INSTALL_PATH/shadowsocks/"
    python local.py -d stop --pid-file="$INSTALL_PATH/ssr.pid" --log-file="$INSTALL_PATH/ssr.log"
}

ssr_restart() {
    ssr_stop
    ssr_start
}

ssr_config() {
    $EDITOR "$INSTALL_PATH/config.json"
}

BLOCKED="

Update failed! For more information, see

https://github.com/the0demiurge/ShadowSocksShare-OpenShift/issues/17

And edit '$WEBSITE' in this script."

ISSUE="

The response was empty, try it 10 mins later or report it on

https://github.com/the0demiurge/CharlesScripts/issues"

ssr_update() {
    JSON=$(curl -L $WEBSITE/json)
    # If failed
    case $? in
    0) ;;
    *)
        echo -e "$BLOCKED"
        exit $?
        ;;
    esac

    # If json is empty
    case $JSON in
    'Not Found')
        echo -e "$BLOCKED"
        exit $?
        ;;
    '' | '{}')
        echo "$ISSUE"
        exit 2
        ;;
    esac

    mv "$INSTALL_PATH/config.json" "$INSTALL_PATH/config.json.bak.$(date +%y-%m-%d-%T)"
    echo -e "$JSON" | tee "$INSTALL_PATH/config.json"
    ssr_restart
    echo -e "Updated from $WEBSITE"
}

ssr_xclip() {
    xclip -o | tee "$INSTALL_PATH/config.json"
    ssr_restart
}

ssr_log() {
    tail -f "$INSTALL_PATH/ssr.log"
}

ssr_shell() {
    cd "$INSTALL_PATH"
    $SHELL
}

ssr_clean() {
    rm -ri "$INSTALL_PATH/config.json.bak.*"
}

ssr_sys_proxy() {
    local flag="$1"

    if [ "$flag" == "on" ]; then
        get_config_file_port

        dconf write /system/proxy/mode "'manual'"
        dconf write /system/proxy/http/host "''"
        dconf write /system/proxy/http/port "0"
        dconf write /system/proxy/https/host "''"
        dconf write /system/proxy/https/port "0"
        dconf write /system/proxy/ftp/host "''"
        dconf write /system/proxy/ftp/port "0"
        dconf write /system/proxy/socks/host "'127.0.0.1'"
        dconf write /system/proxy/socks/port "$PORT"
        dconf write /system/proxy/ignore-hosts "@as []"
    elif [ "$flag" == "off" ]; then
        dconf write /system/proxy/mode "'none'"
    elif [ "$flag" == "info" ]; then
        echo -n "" # placeholder
    else
        ssr_help
        return
    fi

    local mode
    mode=$(dconf read /system/proxy/mode)
    if [ "$mode" == "'manual'" ]; then
        local http_host
        local http_port
        local https_host
        local https_port
        local ftp_host
        local ftp_port
        local socks_host
        local socks_port
        local ignore_hosts

        http_host=$(dconf read /system/proxy/http/host)
        http_port=$(dconf read /system/proxy/http/port)
        https_host=$(dconf read /system/proxy/https/host)
        https_port=$(dconf read /system/proxy/https/port)
        ftp_host=$(dconf read /system/proxy/ftp/host)
        ftp_port=$(dconf read /system/proxy/ftp/port)
        socks_host=$(dconf read /system/proxy/socks/host)
        socks_port=$(dconf read /system/proxy/socks/port)
        ignore_hosts=$(dconf read /system/proxy/ignore-hosts)

        echo -e "Proxy Mode:   $mode"
        echo -e "Http Proxy:   $http_host:$http_port"
        echo -e "Https Proxy:  $https_host:$https_port"
        echo -e "Ftp Proxy:    $ftp_host:$ftp_port"
        echo -e "Socks Proxy:  $socks_host:$socks_port"
        echo -e "Ignore Hosts: $ignore_hosts"
    else
        echo -e "Proxy Mode: $mode"
    fi

}

ssr_main() {
    case $1 in
    help) ssr_help ;;
    install) ssr_install ;;
    uninstall) ssr_uninstall ;;
    update) ssr_update ;;
    config) ssr_config ;;
    xclip) ssr_xclip ;;
    start) ssr_start ;;
    stop) ssr_stop ;;
    restart) ssr_restart ;;
    test) ssr_test ;;
    log) ssr_log ;;
    shell) ssr_shell ;;
    clean) ssr_clean ;;
    sysproxy) ssr_sys_proxy "$2" ;;
    *) ssr_help ;;
    esac
}

ssr_main "$@"
