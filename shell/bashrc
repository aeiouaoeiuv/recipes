# The space will tell bash that the first word after 'sudo' is a command that should be expanded
alias sudo='sudo '

# 256 color
case "$TERM" in
    xterm*)
        export TERM=xterm-256color
        ;;
esac

# GPG error fix
export GPG_TTY=$(tty)

# man page color
export LESS_TERMCAP_mb=$'\E[1;31m'
export LESS_TERMCAP_md=$'\E[38;5;37;1m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;24;48;5;148;1m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_us=$'\E[38;5;11;1m'
export LESS_TERMCAP_ue=$'\E[0m'

#### 38;2 for the foreground, then the color number
#### 48;2 for the background, then the color number
. $HOME/.git-completion.bash
. $HOME/.git-prompt.sh

SEPARATER=$'\UE0B0'         # Rightwards black arrowhead

function boldtext() { # bold text
    echo "\\[\\033[1m\\]"
}
function bgcolor() { # background color
    echo "\\[\\033[48;2;${1}m\\]"
}
function defbgcolor() { # default background color
    echo "\\[\\033[49m\\]"
}
function fgcolor() { # foreground color
    echo "\\[\\033[38;2;${1}m\\]"
}
function reverse() { # reverse foreground color and background color
    echo "\\[\\033[7m\\]"
}
function rscolor() { # reset color
    echo "\\[\\033[0m\\]"
}

prompt_status() {
    local -a txt
    local bg="40;121;162"
    local fg="243;211;89"
    local JOBS_CHAR=$'\u2699' # ⚙

    [[ ${RETVAL} -ne 0 ]] && txt+=${RETVAL}
    [[ $(jobs -l | wc -l) -gt 0 ]] && {
        if [ -n "${txt}" ]; then
            txt+=" "
        fi
        txt+="${JOBS_CHAR}"
    }

    if [ -n "${txt}" ]; then
        LAST_FG="${fg}"
        LAST_BG="${bg}"
        PS1+="$(fgcolor ${fg})$(bgcolor ${bg}) ${txt} "
    fi
}

prompt_dir() {
    local bg="247;219;9"
    local fg="182;21;234"

    if [ -n "${LAST_BG}" -a -n "${LAST_FG}" ]; then
        PS1+="$(fgcolor ${LAST_BG})$(bgcolor ${LAST_FG})${SEPARATER}"
    fi

    local txt="\w"

    # check dir writable
    local LOCK_CHAR=$'\UE0A2' #  Closed padlock
    if [ ! -w "$PWD" ]; then
        txt+=" ${LOCK_CHAR}"
    fi

    LAST_BG="${bg}"
    LAST_FG="${fg}"
    PS1+="$(fgcolor ${fg})$(bgcolor ${bg}) ${txt} "
}

prompt_git() {
    local GIT_CHAR=$'\ue0a0' #  Version control branch
    local STASH_CHAR=$'\u25fc' # ◼
    local STAGE_CHAR=$'\u271a' # ✚
    local UNSTAGE_CHAR=$'\u2217' # ∗
    local UNTRACK_CHAR="?"
    local bg="31;52;85"
    local fg="142;184;56"

    if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
        if [ -n "${LAST_BG}" -a -n "${LAST_FG}" ]; then
            PS1+="$(fgcolor ${LAST_BG})$(bgcolor ${bg})${SEPARATER}"
        fi

        local txt="${GIT_CHAR} $(__git_ps1 %s)"

        if ! $(git rev-parse --is-inside-git-dir); then
            # check stash list
            if [ $(git stash list | wc -l) -gt 0 ]; then
                txt+=" ${STASH_CHAR}"
            fi

            for i in {1}; do
                if [ "${AGNOSTER_RANDOM_GIT_STATUS}" -eq 0 ]; then
                    break
                fi

                # check staged files
                $(git diff --no-ext-diff --quiet --cached)
                if [ $? -ne 0 ]; then
                    txt+=" ${STAGE_CHAR}"
                    break
                fi

                # check unstaged files
                $(git diff --no-ext-diff --quiet)
                if [ $? -ne 0 ]; then
                    txt+=" ${UNSTAGE_CHAR}"
                    break
                fi

                # check untracked files
                if [ ! -z "$(git status --porcelain)" ]; then
                    txt+=" ${UNTRACK_CHAR}"
                    break
                fi
            done
        fi

        LAST_BG="${bg}"
        LAST_FG="${fg}"
        PS1+="$(fgcolor ${fg})$(bgcolor ${bg}) ${txt} "
    fi
}

prompt_end() {
    if [ -n "${LAST_BG}" -a -n "${LAST_FG}" ]; then
        PS1+="$(fgcolor ${LAST_BG})$(defbgcolor)${SEPARATER}$(rscolor) "
    fi
}

build_prompt() {
    RETVAL=$?
    LAST_BG=""
    LAST_FG=""
    AGNOSTER_RANDOM_GIT_STATUS=1
    PS1=""
    prompt_status
    prompt_dir
    prompt_git
    prompt_end
}

PROMPT_COMMAND=build_prompt

if [ -e $HOME/.ls_colors ]; then
    eval $( dircolors -b $HOME/.ls_colors )
fi

